# https://docs.docker.com/compose/compose-file/

x-common-variables: &common-variables
  JAVA_TOOL_OPTIONS: -XX:MaxRAMPercentage=60.0
  SIG_SECRET_KEY: JWTSecretKeyDontUseInProduction!
  USERCTX_KEY: JWTSecretKeyDontUseInProduction!
  server.shutdown: graceful
  server.max-http-header-size: 64KB
  server.forward-headers-strategy: framework
  eureka.client.serviceUrl.defaultZone: http://registry:8080/eureka
  eureka.client.registry-fetch-interval-seconds: 15
  eureka.client.instance-info-replication-interval-seconds: 15
  eureka.client.healthcheck.enabled: true
  eureka.instance.non-secure-port: 8080
  eureka.instance.prefer-ip-address: true
  eureka.instance.initialStatus: STARTING
  management.endpoints.web.exposure.include: '*'
  management.endpoints.enabled-by-default: true
  management.security.roles: ANONYMOUS,ACTUATOR,USER
  spring.main.banner-mode: off
  spring.zipkin.enabled: false
  spring.cloud.config.enabled: false
  spring.cloud.kubernetes.enabled: false
  backbase.audit.enabled: false
  backbase.security.public.paths: /integration-api/**
  backbase.security.mtls.enabled: false
  backbase.http.request-logging-filter.max-payload-length: 5000
  logging.level.com.backbase: DEBUG
  logging.level.org.springframework.web.filter.CommonsRequestLoggingFilter: DEBUG

x-database-variables: &database-variables
  logging.level.liquibase: INFO
  spring.liquibase.enabled: true
  spring.datasource.username: root
  spring.datasource.password: root
  spring.datasource.driver-class-name: com.mysql.cj.jdbc.Driver
  spring.jpa.properties.hibernate.dialect: org.hibernate.dialect.MySQL8Dialect

x-message-broker-variables: &message-broker-variables
  spring.activemq.broker-url: tcp://activemq:61616
  spring.activemq.user: admin
  spring.activemq.password: admin

x-healthcheck-defaults: &healthcheck-defaults
  start_period: 60s
  interval: 15s
  timeout: 5s
  retries: 15

x-integration-service-variables: &integration-service-variables
  backbase.security.public.paths: /**

name: backbase

volumes:
  backbase_mysql_data:
    driver: local

networks:
  default:
    name: backbase_default

services:
  mysql:
    image: mysql:8.0.31
    ports:
      - "3306:3306"
    environment:
      MYSQL_ROOT_PASSWORD: root
    volumes:
      - backbase_mysql_data:/var/lib/mysql
    healthcheck:
      test: mysqladmin ping --silent
      interval: 10s
      timeout: 5s
      retries: 5

  activemq:
    image: symptoma/activemq:5.17.3
    privileged: true
    ports:
      - "61616:61616"
      - "8161:8161"
    healthcheck:
      test: /opt/activemq/bin/activemq query --objname type=Broker,brokerName=*,service=Health | grep Good
      interval: 10s
      timeout: 5s
      retries: 5

  registry:
    container_name: registry
    image: repo.backbase.com/backbase-docker-releases/registry:${BB_VERSION}
    ports:
      - "8761:8080"
    volumes:
      - ./scripts/HealthCheck.java:/tmp/HealthCheck.java
    healthcheck:
      <<: *healthcheck-defaults
      test: [ "CMD", "java", "/tmp/HealthCheck.java" ]

  edge:
    image: repo.backbase.com/backbase-docker-releases/edge:${BB_VERSION}
    ports:
      - "8280:8080"
      - "7777:8080"
    environment:
      <<: *common-variables
      gateway.actuator.security.enabled: false
      gateway.csrf.enabled: false
      SPRING_APPLICATION_JSON: '{ "gateway": { "csrf": { "enabled": false } }, "spring": { "cloud": { "gateway": { "globalcors": { "corsConfigurations": { "[/**]": { "allowedOriginPatterns": "*", "exposedHeaders": "*", "allowedHeaders": "*", "allowedMethods": [ "GET", "POST", "OPTIONS", "PUT", "PATCH", "DELETE" ] } } } } } } }'
    volumes:
      - ./scripts/HealthCheck.java:/tmp/HealthCheck.java
    healthcheck:
      <<: *healthcheck-defaults
      test: [ "CMD", "java", "/tmp/HealthCheck.java", "http://registry:8080/eureka/apps/edge", "<status>UP</status>" ]
    links:
      - registry
      - token-converter

  token-converter:
    image: repo.backbase.com/backbase-docker-releases/oidc-token-converter-service:${BB_VERSION}
    ports:
      - "7779:8080"
    environment:
      <<: *common-variables
      backbase.oidc-token-converter.whitelistedDomains[0].internalHostScheme: http
      backbase.oidc-token-converter.whitelistedDomains[0].internalHost: backbase-identity:8080
      backbase.oidc-token-converter.whitelistedDomains[0].issuerHost: localhost
      backbase.oidc-token-converter.whitelistedDomains[0].allowedIssuers:  http://localhost:8180/auth/realms/backbase

      backbase.oidc-token-converter.whitelistedDomains[1].internalHostScheme: http
      backbase.oidc-token-converter.whitelistedDomains[1].internalHost: backbase-identity:8080
      backbase.oidc-token-converter.whitelistedDomains[1].issuerHost: 10.0.3.105
      backbase.oidc-token-converter.whitelistedDomains[1].allowedIssuers: http://10.0.3.105:8180/auth/realms/backbase

    volumes:
      - ./scripts:/tmp/h
    healthcheck:
      <<: *healthcheck-defaults
      test: [ "CMD", "java", "/tmp/h/HealthCheck.java", "http://registry:8080/eureka/apps/token-converter", "<status>UP</status>" ]
    links:
      - registry
      - backbase-identity

  backbase-identity:
    image: auth-server:${BB_VERSION}
    build:
      context: ../images/auth-server
      args:
        IDENTITY_BUILDER: repo.backbase.com/backbase-docker-releases/auth-server-builder:${BB_VERSION}
    ports:
      - '8180:8080'
    environment:
      QUARKUS_HTTP_CORS: "false"
      #QUARKUS_HTTP_CORS: "true"
      #QUARKUS_HTTP_CORS_EXPOSED_HEADERS: Location
      #QUARKUS_HTTP_CORS_ORIGINS: http://localhost:9191,http://localhost:7777,http://remote-config-web-app:8080,http://edge:8080,http://localhost:4200,http://192.168.20.201:4200,http://192.168.20.201:7777,http://localhost:4300
      #QUARKUS_HTTP_CORS_METHODS: GET,POST,OPTIONS
      KEYCLOAK_ADMIN: "admin"
      KEYCLOAK_ADMIN_PASSWORD: "admin"
      KC_DB_URL: "jdbc:mysql://mysql:3306/backbase_identity?useSSL=false&allowPublicKeyRetrieval=true&cacheServerConfiguration=true&createDatabaseIfNotExist=true"
      KC_DB_USERNAME: "root"
      KC_DB_PASSWORD: "root"
      KC_LOG_LEVEL: "INFO"
      KC_LOG_CONSOLE_FORMAT: "%d{yyy:MM:dd HH:mm:ss.SSS} %-5p [%X{traceId},%X{spanId},%X{sampled}] %i --- [%t] %c{2.} : %m%n"
      KC_HOSTNAME_URL: "http://localhost:8180/auth/"
      KC_SPI_SERVICE_TOKEN_DEFAULT_URL: "http://token-converter:8080"
      KC_SPI_USER_MANAGER_CLIENT_DEFAULT_URL: "http://user-manager:8080"
      KC_SPI_CONNECTIONS_JPA_LEGACY_INITIALIZE_EMPTY: "true"
      KC_SPI_CONNECTIONS_JPA_LEGACY_MIGRATION_STRATEGY: "update"
      KEYCLOAK_BACKBASE_EVENT_LISTENERS_AUDIT_INTEGRATIONSERVICEURL: "http://audit-service:8500/"
      KEYCLOAK_BACKBASE_DEVICE_URL: "http://device-management-service:8182/"
      KEYCLOAK_BACKBASE_FIDO_URL: "http://fido-service:8183/"
      keycloak.backbase.web-authentication.url: http://web-authentication:9971
      BACKBASE_OIDCTOKENCONVERTER_WHITELISTEDDOMAINS_0_ISSUERHOST: localhost
      BACKBASE_OIDCTOKENCONVERTER_WHITELISTEDDOMAINS_1_ISSUERHOST: 10.0.3.105
      JAVA_TOOL_OPTIONS: "-Dquarkus.log.category.'\"com.backbase\"'.level=DEBUG \
                          -Dquarkus.log.category.'\"org.keycloak.protocol.oidc\"'.level=TRACE"
    volumes:
      - ./scripts:/tmp/h
    healthcheck:
      <<: *healthcheck-defaults
      test: [ "CMD", "java", "/tmp/h/HealthCheck.java", "http://localhost:8080/auth/realms/backbase/.well-known/openid-configuration", "backbase" ]
    depends_on:
      mysql:
        condition: service_healthy

  provisioning:
    container_name: provisioning
    image: repo.backbase.com/backbase-docker-releases/provisioning:${BB_VERSION}
    ports:
      - "8502:8502"
    environment:
      <<: [ *common-variables, *message-broker-variables, *database-variables ]
      spring.datasource.url: jdbc:mysql://mysql:3306/provisioning?useSSL=false&allowPublicKeyRetrieval=true&cacheServerConfiguration=true&createDatabaseIfNotExist=true
      #spring.datasource.hikari.pool-name: content-services
      server.port: 8502

    volumes:
      - ./scripts:/tmp/h
    healthcheck:
      <<: *healthcheck-defaults
      test: [ "CMD", "java", "/tmp/h/HealthCheck.java", "http://registry:8080/eureka/apps/provisioning", "<status>UP</status>" ]


  remote-config:
    container_name: remote-config
    image: repo.backbase.com/backbase-docker-releases/remote-config:${BB_VERSION}
    ports:
      - "9995:8504"
    environment:
      <<: [ *common-variables, *message-broker-variables, *database-variables ]
      spring.datasource.url: jdbc:mysql://mysql:3306/remote-config?useSSL=false&allowPublicKeyRetrieval=true&cacheServerConfiguration=true&createDatabaseIfNotExist=true
      server.port: 8504
    volumes:
      - ./scripts:/tmp/h
    healthcheck:
      <<: *healthcheck-defaults
      test: [ "CMD", "java", "/tmp/h/HealthCheck.java", "http://registry:8080/eureka/apps/remote-config", "<status>UP</status>" ]


  personal-loans-service:
    container_name: personal-loans-service
    image: repo.backbase.com/backbase-docker-releases/personal-loans-service/2023.09-LTS-digital-sales
    ports:
      - "9994:8080"
    environment:
      <<: [ *common-variables, *message-broker-variables, *database-variables ]
      spring.datasource.url: jdbc:mysql://mysql:3306/personal-loans-service?useSSL=false&allowPublicKeyRetrieval=true&cacheServerConfiguration=true&createDatabaseIfNotExist=true
      server.port: 8080
    volumes:
      - ./scripts:/tmp/h
    healthcheck:
      <<: *healthcheck-defaults
      test: [ "CMD", "java", "/tmp/h/HealthCheck.java", "http://registry:8080/eureka/apps/remote-config", "<status>UP</status>" ]


#  backbase-docker-releases/engagement-event
#  backbase-docker-releases/engagement-event-integration-mock
#  backbase-docker-releases/engagements-data-retail


  card-manager:
    container_name: card-manager
    image: repo.backbase.com/backbase-docker-releases/card-manager:${BB_VERSION}
    ports:
      - "9993:8504"
    environment:
      <<: [ *common-variables, *message-broker-variables, *database-variables ]
      spring.datasource.url: jdbc:mysql://mysql:3306/remote-config?useSSL=false&allowPublicKeyRetrieval=true&cacheServerConfiguration=true&createDatabaseIfNotExist=true
      server.port: 8504
    volumes:
      - ./scripts:/tmp/h


  enrollment-manager:
    container_name: enrollment-manager
    image: repo.backbase.com/backbase-docker-releases/enrollment-manager:${BB_VERSION}
    ports:
      - "9992:8080"
    environment:
      <<: [ *common-variables, *message-broker-variables, *database-variables ]
      spring.datasource.url: jdbc:mysql://mysql:3306/enrollment-manager?useSSL=false&allowPublicKeyRetrieval=true&cacheServerConfiguration=true&createDatabaseIfNotExist=true
      server.port: 8080
    volumes:
      - ./scripts:/tmp/h

  enrollment-support-service-mock:
    container_name: enrollment-support-service-mock
    image: repo.backbase.com/backbase-docker-releases/enrollment-support-service-mock:${BB_VERSION}
    ports:
      - "9991:8080"
    environment:
      <<: [ *common-variables, *message-broker-variables, *database-variables ]
      server.port: 8080
    volumes:
      - ./scripts:/tmp/h

  content-services:
    container_name: content-services
    image: repo.backbase.com/backbase-docker-releases/contentservices:${BB_VERSION}
    ports:
      - "8501:8501"
    environment:
      <<: [ *common-variables, *message-broker-variables, *database-variables ]
      spring.datasource.url: jdbc:mysql://mysql:3306/content-services?useSSL=false&allowPublicKeyRetrieval=true&cacheServerConfiguration=true&createDatabaseIfNotExist=true
      contentservices.filesystem.import-location: ./import # Originially was '${BACKBASE_HOME}/contentservices/import'
      contentservices.filesystem.export-location: ./export # Originially was '${BACKBASE_HOME}/contentservices/export'
      contentservices.extension-points.enabled: true
      contentservices.auditing.enabled: true
      contentservices.provisioning.enabled: true
      space-controller.enabled: true
      space-controller.datasource.strategy: SWITCH_DATASOURCE
      space-controller.space-filter.should-not-filter-paths: actuator/**
      space-controller.spaces[0].id: draft
      space-controller.spaces[0].datasource: << *database-variables
      space-controller.spaces[0].datasource.type: com.zaxxer.hikari.HikariDataSource
      space-controller.spaces[1].id: final
      space-controller.spaces[1].datasource: << *database-variables
      space-controller.spaces[1].datasource.type: com.zaxxer.hikari.HikariDataSource
      server.port: 8501
      spring.liquibase.enabled: false
      backbase.security.public.paths: /**
      eureka.instance.prefer-ip-address: false
    volumes:
      - ./scripts:/tmp/h
    healthcheck:
      <<: *healthcheck-defaults
      test: [ "CMD", "java", "/tmp/h/HealthCheck.java", "http://registry:8080/eureka/apps/contentservices", "<status>UP</status>" ]

  access-control:
    image: repo.backbase.com/backbase-docker-releases/access-control:${BB_VERSION}
    ports:
      - "8040:8080"
    environment:
      <<: [*common-variables, *message-broker-variables, *database-variables]
      spring.datasource.url: jdbc:mysql://mysql:3306/access-control?useSSL=false&allowPublicKeyRetrieval=true&cacheServerConfiguration=true&createDatabaseIfNotExist=true
      LOGGING_LEVEL_COM_BACKBASE: DEBUG
      logging.level.org.springframework.web.filter.CommonsRequestLoggingFilter: DEBUG
    volumes:
      - ./scripts:/tmp/h
    healthcheck:
      <<: *healthcheck-defaults
      test: [ "CMD", "java", "/tmp/h/HealthCheck.java", "http://registry:8080/eureka/apps/access-control", "<status>UP</status>" ]
    depends_on:
      mysql:
        condition: service_healthy
    links:
      - activemq
      - registry
  push-integration-service:
    container_name: push-integration-service
    image: repo.backbase.com/backbase-docker-releases/push-integration-service:${BB_VERSION}
    ports:
      - "8503:8503"
    environment:
      <<: [ *common-variables, *message-broker-variables, *database-variables ]
      spring.datasource.url: jdbc:mysql://mysql:3306/push-integration-service?useSSL=false&allowPublicKeyRetrieval=true&cacheServerConfiguration=true&createDatabaseIfNotExist=true
      backbase.web.security.enabled: true
      backbase.mobile.ios.isProduction: false
      backbase.mobile.ios.topic: "com.backbase.poc.pushnotifications"
      backbase.mobile.android.url: "https://fcm.googleapis.com/fcm/send"
      backbase.mobile.android.key: "License key should be here"
      server.port: 8503

  audit-service:
    container_name: audit-service
    image: repo.backbase.com/backbase-docker-releases/audit-service:${BB_VERSION}
    ports:
      - "8500:8500"
    environment:
      <<: [ *common-variables, *message-broker-variables, *database-variables ]
      spring.datasource.url: jdbc:mysql://mysql:3306/audit-service?useSSL=false&allowPublicKeyRetrieval=true&cacheServerConfiguration=true&createDatabaseIfNotExist=true
      spring.cache.caffeine.spec: expireAfterWrite=10s
      server.port: 8500
    volumes:
      - ./scripts:/tmp/h
    healthcheck:
      <<: *healthcheck-defaults
      test: [ "CMD", "java", "/tmp/h/HealthCheck.java", "http://registry:8080/eureka/apps/audit-service", "<status>UP</status>" ]

  arrangement-manager:
    image: repo.backbase.com/backbase-docker-releases/arrangement-manager:${BB_VERSION}
    ports:
      - "8050:8080"
    environment:
      <<: [*common-variables, *message-broker-variables, *database-variables]
      spring.datasource.url: jdbc:mysql://mysql:3306/arrangement-manager?useSSL=false&allowPublicKeyRetrieval=true&cacheServerConfiguration=true&createDatabaseIfNotExist=true
    volumes:
      - ./scripts:/tmp/h
    healthcheck:
      <<: *healthcheck-defaults
      test: [ "CMD", "java", "/tmp/h/HealthCheck.java", "http://registry:8080/eureka/apps/arrangement-manager", "<status>UP</status>" ]
    depends_on:
      mysql:
        condition: service_healthy
    links:
      - activemq
      - registry

  user-manager:
    image: repo.backbase.com/backbase-docker-releases/user-manager:${BB_VERSION}
    ports:
      - "8060:8080"
    environment:
      <<: [*common-variables, *message-broker-variables, *database-variables]
      spring.datasource.url: jdbc:mysql://mysql:3306/user-manager?useSSL=false&allowPublicKeyRetrieval=true&cacheServerConfiguration=true&createDatabaseIfNotExist=true
      backbase.users.identity-endpoints-enabled: true
      backbase.users.identity-integration-enabled: true
      backbase.users.sync-primary-to-identity-enabled: true
      backbase.security.public.paths: /**
      logging.level.com.backbase: DEBUG
      spring.cloud.discovery.client.simple.instances.user-integration-outbound-service[0].uri: http://wiremock:8080
    volumes:
      - ./scripts:/tmp/h
    healthcheck:
      <<: *healthcheck-defaults
      test: [ "CMD", "java", "/tmp/h/HealthCheck.java", "http://registry:8080/eureka/apps/user-manager", "<status>UP</status>" ]
    depends_on:
      mysql:
        condition: service_healthy
    links:
      - activemq
      - registry

  identity-integration-service:
    image: repo.backbase.com/backbase-docker-releases/identity-integration-service:${BB_VERSION}
    ports:
      - "8070:8080"
    environment:
      <<: *common-variables
      identity.serverUrl: http://backbase-identity:8080/auth
      identity.masterAdmin.username: admin
      identity.masterAdmin.password: admin
      identity.realmConfiguration.fallbackOptions.enableUser: true
      identity.realmConfiguration.fallbackOptions.useTemporaryPassword: true
    volumes:
      - ./scripts:/tmp/h
    healthcheck:
      <<: *healthcheck-defaults
      test: [ "CMD", "java", "/tmp/h/HealthCheck.java", "http://registry:8080/eureka/apps/identity-integration-service", "<status>UP</status>" ]
    links:
      - registry
      - backbase-identity


  legalentity-integration-external-mock:
    container_name: legalentity-integration-external-mock
    image: repo.backbase.com/backbase-docker-releases/legalentity-integration-external-mock:${BB_VERSION}
    ports:
      - "8042:8042"
    environment:
      <<: [ *common-variables, *message-broker-variables ]
      server.port: 8042

    volumes:
      - ./scripts:/tmp/h
    healthcheck:
      <<: *healthcheck-defaults
      test: [ "CMD", "java", "/tmp/h/HealthCheck.java" ]

  legalentity-integration-service:
    container_name: legalentity-integration-service
    image: repo.backbase.com/backbase-docker-releases/legalentity-integration-service:${BB_VERSION}
    ports:
      - "8043:8043"
    environment:
      <<: [ *common-variables, *message-broker-variables, *integration-service-variables ]
      server.port: 8043
      backbase.security.public.paths: /**

  approval:
    container_name: approval-service
    image: repo.backbase.com/backbase-docker-releases/approval-service:${BB_VERSION}
    ports:
      - "8505:8505"
    environment:
      <<: [ *common-variables, *message-broker-variables, *database-variables ]
      spring.datasource.url: jdbc:mysql://mysql:3306/approval?useSSL=false&allowPublicKeyRetrieval=true&cacheServerConfiguration=true&createDatabaseIfNotExist=true
      server.port: 8505
    volumes:
      - ./scripts:/tmp/h
    healthcheck:
      <<: *healthcheck-defaults
      test: [ "CMD", "java", "/tmp/h/HealthCheck.java", "http://registry:8080/eureka/apps/approval-service", "<status>UP</status>" ]

  approvalintegration:
    container_name: approvalintegrationservice
    image: repo.backbase.com/docker-releases/approval-integration-service:3.4.31
    ports:
      - "8507:8507"
    environment:
      <<: [ *common-variables, *message-broker-variables, *database-variables ]
      server.port: 8507
    volumes:
      - ./scripts:/tmp/h
    healthcheck:
      <<: *healthcheck-defaults
      test: [ "CMD", "java", "/tmp/h/HealthCheck.java", "http://registry:8080/eureka/apps/approvalintegrationservice", "<status>UP</status>" ]

  limit:
    container_name: limit-service
    image: repo.backbase.com/backbase-docker-releases/limit:${BB_VERSION}
    ports:
      - "8506:8506"
      - "5007:5007"
    environment:
      <<: [ *common-variables, *message-broker-variables, *database-variables ]
      spring.datasource.url: jdbc:mysql://mysql:3306/limits?useSSL=false&allowPublicKeyRetrieval=true&cacheServerConfiguration=true&createDatabaseIfNotExist=true
      server.port: 8506
      JAVA_TOOL_OPTIONS: '-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5007'
    volumes:
      - ./scripts:/tmp/h
    healthcheck:
      <<: *healthcheck-defaults
      test: [ "CMD", "java", "/tmp/h/HealthCheck.java", "http://registry:8080/eureka/apps/limit-service", "<status>UP</status>" ]


  product-catalog-task:
    image: repo.backbase.com/backbase-stream-images/product-catalog-task:${STREAM_VERSION}
    profiles:
      - bootstrap
    environment:
      <<: *common-variables
      spring.config.additional-location: file:/tmp/ingestion.yml
    volumes:
      - ../config/stream/ingestion.yml:/tmp/ingestion.yml
    depends_on:
      token-converter:
        condition: service_healthy
      arrangement-manager:
        condition: service_healthy

  legal-entity-bootstrap-task:
    image: repo.backbase.com/backbase-stream-images/legal-entity-bootstrap-task:${STREAM_VERSION}
    profiles:
      - bootstrap
    environment:
      <<: *common-variables
      spring.config.additional-location: file:/tmp/ingestion.yml
    volumes:
      - ../config/stream/ingestion.yml:/tmp/ingestion.yml
    depends_on:
      token-converter:
        condition: service_healthy
      access-control:
        condition: service_healthy
      arrangement-manager:
        condition: service_healthy
      user-manager:
        condition: service_healthy
      identity-integration-service:
        condition: service_healthy
      backbase-identity:
        condition: service_healthy
      product-catalog-task:
        condition: service_completed_successfully

  wiremock:
    image: wiremock/wiremock:2.32.0
    profiles:
      - with-mocks
    command:
      - --global-response-templating
      - --verbose
    volumes:
      - ./stubs:/home/wiremock

  postman-health-check:
    image: postman/newman
    platform: linux/amd64
    command:
      run /etc/newman/postman_collection.json --environment="/etc/newman/postman_environment.json"
    volumes:
      -  ../../test/postman/HealthCheck_Local-Backend-Environment.postman_collection.json:/etc/newman/postman_collection.json
      -  ../../test/postman/Docker-Backend-Environment.postman_environment.json:/etc/newman/postman_environment.json
    depends_on:
      access-control:
        condition: service_healthy
      arrangement-manager:
        condition: service_healthy
      backbase-identity:
        condition: service_healthy
      identity-integration-service:
        condition: service_healthy
      token-converter:
        condition: service_healthy
      user-manager:
        condition: service_healthy

  # <EXAMPLE-SERVICE-NAME>:
  #   image: <DOCKER-REGISTRY>/<REPOSITORY-NAME>:<TAG>
  #   ports:
  #     - "8090:8080"
  #   environment:
  #     <<: *common-variables
  #     eureka.client.enabled: 'true'
  #   volumes:
  #     - ./scripts:/tmp/h
  #   healthcheck:
  #     <<: *healthcheck-defaults
  #     test: [ "CMD", "java", "/tmp/h/HealthCheck.java", "http://registry:8080/eureka/apps/<EXAMPLE-SERVICE-NAME>", "<status>UP</status>" ]
  #   links:
  #     - registry

  fido-service:
    container_name: fido-service
    image: repo.backbase.com/backbase-docker-releases/fido-service:${BB_VERSION}
    ports:
      - '8183:8183'
    environment:
      <<: [ *common-variables, *message-broker-variables, *database-variables ]
      spring.datasource.url: jdbc:mysql://mysql:3306/fido-service?useSSL=false&allowPublicKeyRetrieval=true&cacheServerConfiguration=true&createDatabaseIfNotExist=true
      server.port: 8183

    volumes:
      - ./scripts:/tmp/h

  device-management-service:
    container_name: device-management-service
    image: repo.backbase.com/backbase-docker-releases/device-management-service:${BB_VERSION}
    ports:
      - '8182:8182'
    environment:
      <<: [ *common-variables, *message-broker-variables, *database-variables ]
      spring.datasource.url: jdbc:mysql://mysql:3306/device_management?useSSL=false&allowPublicKeyRetrieval=true&cacheServerConfiguration=true&createDatabaseIfNotExist=true
      server.port: 8182

    volumes:
      - ./scripts:/tmp/h


  confirmation:
    container_name: confirmation
    image: repo.backbase.com/backbase-docker-releases/confirmation:${BB_VERSION}
    ports:
      - '8181:8181'
    environment:
      <<: [ *common-variables, *message-broker-variables, *database-variables ]
      spring.datasource.url: jdbc:mysql://mysql:3306/confirmation?useSSL=false&allowPublicKeyRetrieval=true&cacheServerConfiguration=true&createDatabaseIfNotExist=true
      server.port: 8181
    volumes:
      - ./scripts:/tmp/h


  notifications-service:
    container_name: notifications-service
    image: repo.backbase.com/backbase-docker-releases/notifications-service:${BB_VERSION}
    ports:
      - "8360:8360"
    environment:
      <<: [ *common-variables, *message-broker-variables, *database-variables ]
      server.port: 8360
      spring.datasource.url: jdbc:mysql://mysql:3306/notifications?useSSL=false&allowPublicKeyRetrieval=true&cacheServerConfiguration=true&createDatabaseIfNotExist=true
    volumes:
      - ./scripts:/tmp/h

  user-profile-manager:
    container_name: user-profile-manager
    image: repo.backbase.com/backbase-docker-releases/user-profile-manager:${BB_VERSION}
    ports:
      - "8061:8061"
    environment:
      <<: [ *common-variables, *message-broker-variables, *database-variables ]
      spring.datasource.url: jdbc:mysql://mysql:3306/user-profile-manager?useSSL=false&allowPublicKeyRetrieval=true&cacheServerConfiguration=true&createDatabaseIfNotExist=true
      scim.client.resource-type: Users
      scim.client.service-uri: "http://user-profile-core-mock:8062"
      server.port: 8061
    volumes:
      - ./scripts:/tmp/h
    healthcheck:
      <<: *healthcheck-defaults
      test: [ "CMD", "java", "/tmp/h/HealthCheck.java", "http://registry:8080/eureka/apps/user-profile-manager", "<status>UP</status>" ]


  user-profile-core-mock:
    container_name: user-profile-core-mock
    image: repo.backbase.com/backbase-docker-releases/user-profile-core-mock:${BB_VERSION}
    ports:
      - "8062:8062"
    environment:
      <<: [ *common-variables, *message-broker-variables ]
      scim.server-config.authentication-schemes:
      scim.resource-types.user.name: User
      scim.resource-types.user.endpoint: /Users
      scim.resource-types.user.schema: "urn:ietf:params:scim:schemas:core:2.0:User"
      scim.resource-types.user.schemaExtensions[0].schema: "urn:ietf:params:scim:schemas:extension:backbase:2.0:User"
      scim.resource-types.user.schemaExtensions[0].required: false
      scim.resource-types.user.schemaExtensions[1].schema: "urn:ietf:params:scim:schemas:extension:backbase:2.0:ExtendedUser"
      scim.resource-types.user.schemaExtensions[1].required: false
      backbase.security.public.paths: /**
      server.port: 8062
      backbase.activemq.enabled: true
      SPRING_AUTOCONFIGURE_EXCLUDE: "org.springframework.cloud.function.context.config.ContextFunctionCatalogAutoConfiguration,com.backbase.buildingblocks.backend.communication.event.config.SpringCloudStreamEventingAutoConfiguration"
    volumes:
      - ./scripts:/tmp/h
    healthcheck:
      <<: *healthcheck-defaults
      test: [ "CMD", "java", "/tmp/h/HealthCheck.java", "http://registry:8080/eureka/apps/user-profile-core-mock", "<status>UP</status>" ]


  #  user-outbound-integration-service:
  #    container_name: user-outbound-integration-service
  #    profiles:
  #      - iam
  #      - access-control
  #      - ocb
  #    image: 459208928199.dkr.ecr.us-west-2.amazonaws.com/development/user-outbound-integration-service:1.0.0-SNAPSHOT
  #    ports:
  #      - "8044:8044"
  #    environment:
  #      <<: [ *common-variables, *message-broker-variables ]
  #      server.port: 8044
  #
  #    volumes:
  #      - ./scripts:/tmp/h
  #    healthcheck:
  #      <<: *healthcheck-defaults
  #      test: [ "CMD", "java", "/tmp/h/HealthCheck.java", "http://registry:8080/eureka/apps/user-outbound-integration-service", "<status>UP</status>" ]

  employee:
    container_name: employee
    image: repo.backbase.com/backbase-docker-releases/employee:${BB_VERSION}
    ports:
      - "8340:8340"
    environment:
      <<: [ *common-variables, *message-broker-variables ]
      server.port: 8340

    volumes:
      - ./scripts:/tmp/h

  engagement:
    container_name: engagement
    image: repo.backbase.com/backbase-docker-releases/engagement:${BB_VERSION}
    ports:
      - "8320:8320"
    environment:
      <<: [ *common-variables, *message-broker-variables, *database-variables ]
      server.port: 8320
      spring.datasource.url: jdbc:mysql://mysql:3306/engagement?useSSL=false&allowPublicKeyRetrieval=true&cacheServerConfiguration=true&createDatabaseIfNotExist=true
    volumes:
      - ./scripts:/tmp/h

  communication:
    container_name: communications
    image: repo.backbase.com/backbase-docker-releases/communication:{BB_VERSION}
    ports:
      - '9972:9972'
    environment:
      <<: [ *common-variables, *message-broker-variables, *database-variables ]
      server.port: 9972
    volumes:
      - ./scripts:/tmp/h

  web-authentication:
    container_name: web-authentication-service
    profiles:
      - web
    image: repo.backbase.com/docker-releases/web-authentication:${BB_VERSION}
    ports:
      - '9971:9971'
    environment:
      <<: [ *common-variables]
      eureka.client.enabled: 'true'
      spring.datasource.url: jdbc:mysql://mysql:3306/web_authentication?useSSL=false&allowPublicKeyRetrieval=true&cacheServerConfiguration=true&createDatabaseIfNotExist=true
      server.port: 9971
      spring.config.additional-location: file:/tmp/application.yaml
    volumes:
      - ./scripts:/tmp/h

#  retail-web-app:
#    profiles:
#      - web
#    image: repo.backbase.com/backbase-docker-releases/retail-usa:2022.03.1
#    ports:
#      - "4300:4300"
#    environment:
#      <<: [ *common-variables]
#      # The port that the app is hosted on --e.g: 8080. Note that 0-1024 ports are for privileged access http://edge:8080/eureka
#      PORT: 4300
#      # Path to API root for backend services --e.g: /api or my.web.domain.com/api
#      API_ROOT: http://localhost:7777/api
#      # Path to the authentication service endpoint --e.g: /auth or identity.server/auth
#      AUTH_URL: http://localhost:8180/auth
#      AUTH_REALM: backbase
#      AUTH_SCOPE: openid
#      AUTH_CLIENT_ID: bb-web-client
#      FALLBACK_LOCALE: en
#      BASE_HREF: /
#
  emp-web-app:
    image: repo.backbase.com/docker-releases/employee-app:2023.02-LTS-no-production
    #container_name: emp-web-app
    profiles:
      - web
    ports:
      - "4200:4200"
    environment:
      <<: [ *common-variables]
      # The port that the app is hosted on --e.g: 8080. Note that 0-1024 ports are for privileged access
      PORT: 4200
      # Path to API root for backend services --e.g: /api or my.web.domain.com/api
      API_ROOT: http://localhost:7777/api
      # Path to the authentication service endpoint --e.g: /auth or identity.server/auth
      AUTH_URL: http://localhost:8180/auth/
      AUTH_REALM: backbase

  engage-web-app:
    image: repo.backbase.com/backbase-docker-releases/engage-web-app:{BB_VERSION}
    container_name: engage-web-app
    profiles:
      - web
    ports:
      - "4400:8080"
    environment:
      <<: [ *common-variables]
      # The port that the app is hosted on --e.g: 8080. Note that 0-1024 ports are for privileged access
      PORT: 4400
      # Path to API root for backend services --e.g: /api or my.web.domain.com/api
      API_ROOT: http://localhost:7777/api
      # Path to the authentication service endpoint --e.g: /auth or identity.server/auth
      AUTH_URL: http://localhost:8180/auth/
      AUTH_REALM: backbase
      AUTH_CLIENT_ID: bb-web-client

  remote-config-web-app:
    image: repo.backbase.com/backbase-docker-releases/remote-config-web-app:{BB_VERSION}
    container_name: remote-config-web-app
    profiles:
      - web
    ports:
      - "4500:8080"
    environment:
      <<: [ *common-variables]
      # The port that the app is hosted on --e.g: 8080. Note that 0-1024 ports are for privileged access
      PORT: 4500
      # Path to API root for backend services --e.g: /api or my.web.domain.com/api
      API_ROOT: http://localhost:7777/api
      # Path to the authentication service endpoint --e.g: /auth or identity.server/auth
      AUTH_URL: http://localhost:8180/auth/
      AUTH_REALM: backbase
      AUTH_CLIENT_ID: bb-web-client

  account-statement:
    container_name: account-statement
    profiles:
      - banking-services
    image: repo.backbase.com/backbase-docker-releases/account-statement:${BB_VERSION}
    ports:
      - "8310:8310"
    environment:
      <<: [ *common-variables, *message-broker-variables ]
      server.port: 8310

    volumes:
      - ./scripts:/tmp/h
    healthcheck:
      <<: *healthcheck-defaults
      test: [ "CMD", "java", "/tmp/h/HealthCheck.java", "http://registry:8080/eureka/apps/account-statement", "<status>UP</status>" ]

  account-statement-integration-mock:
    container_name: account-statement-integration-mock
    profiles:
      - banking-services
    image: repo.backbase.com/backbase-docker-releases/account-statement-integration-mock:${BB_VERSION}
    ports:
      - "8311:8311"
    environment:
      <<: [ *common-variables, *message-broker-variables, *database-variables ]
      server.port: 8311
      spring.datasource.driver-class-name: 'org.h2.Driver'
      spring.datasource.username: 'sa'
      spring.datasource.password: 'password'
    volumes:
      - ./scripts:/tmp/h
    healthcheck:
      <<: *healthcheck-defaults
      test: [ "CMD", "java", "/tmp/h/HealthCheck.java", "http://registry:8080/eureka/apps/account-statement-integration-mock", "<status>UP</status>" ]

  billpay-integrator:
    container_name: billpay-integrator
    profiles:
      - banking-services
    image: repo.backbase.com/backbase-docker-releases/billpay-integrator:${BB_VERSION}
    ports:
      - "8330:8330"
    environment:
      <<: [ *common-variables, *message-broker-variables, *database-variables ]
      server.port: 8330
      spring.datasource.url: jdbc:mysql://mysql:3306/billpay-integrator?useSSL=false&allowPublicKeyRetrieval=true&cacheServerConfiguration=true&createDatabaseIfNotExist=true
    volumes:
      - ./scripts:/tmp/h
    healthcheck:
      <<: *healthcheck-defaults
      test: [ "CMD", "java", "/tmp/h/HealthCheck.java", "http://registry:8080/eureka/apps/billpay-integrator", "<status>UP</status>" ]

  contact-manager:
    container_name: contact-manager
    profiles:
      - banking-services
    image: repo.backbase.com/backbase-docker-releases/contact-manager:${BB_VERSION}
    ports:
      - "8331:8331"
    environment:
      <<: [ *common-variables, *message-broker-variables, *database-variables ]
      spring.datasource.url: jdbc:mysql://mysql:3306/contact-manager?useSSL=false&allowPublicKeyRetrieval=true&cacheServerConfiguration=true&createDatabaseIfNotExist=true
      # Contact Extensions Example
      backbase.api.extensions.classes.com.backbase.presentation.contact.rest.spec.v2.contacts.ContactsPostRequestBody: pokemon-data
      backbase.api.extensions.classes.com.backbase.presentation.contact.rest.spec.v2.contacts.ContactPutRequestBody: pokemon-data
      backbase.api.extensions.classes.com.backbase.presentation.contact.rest.spec.v2.contacts.AccountInformation: pokemon-data
      # Persistence spec
      backbase.api.extensions.classes.com.backbase.dbs.party.persistence.spec.v2.parties.PartyDto: pokemon-data
      backbase.api.extensions.classes.com.backbase.dbs.party.persistence.spec.v2.parties.AccountInformation: pokemon-data
      # Persistence entities
      backbase.api.extensions.classes.com.backbase.dbs.contactmanager.party.persistence.Party: pokemon-data
      backbase.api.extensions.classes.com.backbase.dbs.contactmanager.party.persistence.AccountInformation: pokemon-data

      backbase.api.extensions.property-sets.pokemon-data.properties[0].property-name: favPokemon
      backbase.api.extensions.property-sets.pokemon-data.properties[0].security[0]: confidential
      backbase.api.extensions.property-sets.pokemon-data.properties[0].type: string
      backbase.api.extensions.property-sets.pokemon-data.properties[1].property-name: rank
      backbase.api.extensions.property-sets.pokemon-data.properties[1].security[0]: confidential
      backbase.api.extensions.property-sets.pokemon-data.properties[1].type: number
      server.port: 8331

    volumes:
      - ./scripts:/tmp/h
    healthcheck:
      <<: *healthcheck-defaults
      test: [ "CMD", "java", "/tmp/h/HealthCheck.java", "http://registry:8080/eureka/apps/contact-manager", "<status>UP</status>" ]

  messages-service:
    container_name: messages-service
    profiles:
      - banking-services
    image: repo.backbase.com/backbase-docker-releases/messages-service:${BB_VERSION}
    ports:
      - "8350:8350"
    environment:
      <<: [ *common-variables, *message-broker-variables, *database-variables ]
      server.port: 8350
      spring.datasource.url: jdbc:mysql://mysql:3306/messages-service?useSSL=false&allowPublicKeyRetrieval=true&cacheServerConfiguration=true&createDatabaseIfNotExist=true
      messaging.password: password
    volumes:
      - ./scripts:/tmp/h
    healthcheck:
      <<: *healthcheck-defaults
      test: [ "CMD", "java", "/tmp/h/HealthCheck.java", "http://registry:8080/eureka/apps/messages-service", "<status>UP</status>" ]

  payment-order-a2a:
    container_name: payment-order-a2a
    profiles:
      - banking-services
    image: repo.backbase.com/backbase-docker-releases/payment-order-a2a:${BB_VERSION}
    ports:
      - "8370:8370"
    environment:
      <<: [ *common-variables, *message-broker-variables ]
      server.port: 8370

    volumes:
      - ./scripts:/tmp/h
    healthcheck:
      <<: *healthcheck-defaults
      test: [ "CMD", "java", "/tmp/h/HealthCheck.java", "http://registry:8080/eureka/apps/payment-order-a2a", "<status>UP</status>" ]

  payment-order-core-mock-service:
    container_name: payment-order-core-mock-service
    profiles:
      - banking-services
    image: repo.backbase.com/backbase-docker-releases/payment-order-core-mock-service:${BB_VERSION}
    ports:
      - "8371:8371"
    environment:
      <<: *common-variables
      server.port: 8371

    volumes:
      - ./scripts:/tmp/h
    healthcheck:
      <<: *healthcheck-defaults
      test: [ "CMD", "java", "/tmp/h/HealthCheck.java", "http://registry:8080/eureka/apps/payment-order-core-mock-service", "<status>UP</status>" ]

  payment-order-options:
    container_name: payment-order-options
    profiles:
      - banking-services
    image: repo.backbase.com/backbase-docker-releases/payment-order-options:${BB_VERSION}
    ports:
      - "8372:8372"
    environment:
      <<: [ *common-variables, *message-broker-variables ]
      server.port: 8372

    volumes:
      - ./scripts:/tmp/h
    healthcheck:
      <<: *healthcheck-defaults
      test: [ "CMD", "java", "/tmp/h/HealthCheck.java", "http://registry:8080/eureka/apps/payment-order-options", "<status>UP</status>" ]

  payment-order-service:
    container_name: payment-order-service
    profiles:
      - banking-services
    image: repo.backbase.com/backbase-docker-releases/payment-order-service:${BB_VERSION}
    ports:
      - "8373:8373"
    environment:
      <<: [ *common-variables, *message-broker-variables, *database-variables ]
      spring.datasource.url: jdbc:mysql://mysql:3306/payment-order-service?useSSL=false&allowPublicKeyRetrieval=true&cacheServerConfiguration=true&createDatabaseIfNotExist=true
      server.port: 8373

    volumes:
      - ./scripts:/tmp/h
    healthcheck:
      <<: *healthcheck-defaults
      test: [ "CMD", "java", "/tmp/h/HealthCheck.java", "http://registry:8080/eureka/apps/payment-order-service", "<status>UP</status>" ]


  budget-planner:
    container_name: budget-planner
    profiles:
      - banking-services
    image: repo.backbase.com/backbase-docker-releases/budget-planner:${BB_VERSION}
    ports:
      - "8380:8380"
    environment:
      <<: [ *common-variables, *message-broker-variables, *database-variables ]
      server.port: 8380

      spring.datasource.url: jdbc:mysql://mysql:3306/budget-planner?useSSL=false&allowPublicKeyRetrieval=true&cacheServerConfiguration=true&createDatabaseIfNotExist=true
    volumes:
      - ./scripts:/tmp/h
    healthcheck:
      <<: *healthcheck-defaults
      test: [ "CMD", "java", "/tmp/h/HealthCheck.java", "http://registry:8080/eureka/apps/budget-planner", "<status>UP</status>" ]

  pocket-tailor:
    container_name: pocket-tailor
    profiles:
      - banking-services
    image: repo.backbase.com/backbase-docker-releases/pocket-tailor:${BB_VERSION}
    ports:
      - "8381:8381"
    environment:
      <<: [ *common-variables, *message-broker-variables, *database-variables ]
      server.port: 8381
      spring.datasource.url: jdbc:mysql://mysql:3306/pocket-tailor?useSSL=false&allowPublicKeyRetrieval=true&cacheServerConfiguration=true&createDatabaseIfNotExist=true
    volumes:
      - ./scripts:/tmp/h
    healthcheck:
      <<: *healthcheck-defaults
      test: [ "CMD", "java", "/tmp/h/HealthCheck.java", "http://registry:8080/eureka/apps/pocket-tailor", "<status>UP</status>" ]

  transaction-category-collector:
    container_name: transaction-category-collector
    profiles:
      - banking-services
    image: repo.backbase.com/backbase-docker-releases/transaction-category-collector:${BB_VERSION}
    ports:
      - "8382:8382"
    environment:
      <<: [ *common-variables, *message-broker-variables, *database-variables ]
      server.port: 8382
      spring.datasource.url: jdbc:mysql://mysql:3306/transaction-category-collector?useSSL=false&allowPublicKeyRetrieval=true&cacheServerConfiguration=true&createDatabaseIfNotExist=true
      backbase.category.management.enabled: true
      backbase.transaction.enrichment.provider: mock
    volumes:
      - ./scripts:/tmp/h
    healthcheck:
      <<: *healthcheck-defaults
      test: [ "CMD", "java", "/tmp/h/HealthCheck.java", "http://registry:8080/eureka/apps/transaction-category-collector", "<status>UP</status>" ]


  account-mock:
    container_name: account-mock
    profiles:
      - banking-services
    image: repo.backbase.com/backbase-docker-releases/account-mock:${BB_VERSION}
    ports:
      - "8391:8391"
    environment:
      <<: [ *common-variables, *message-broker-variables ]
      server.port: 8391

    volumes:
      - ./scripts:/tmp/h
    healthcheck:
      <<: *healthcheck-defaults
      test: [ "CMD", "java", "/tmp/h/HealthCheck.java", "http://registry:8080/eureka/apps/account-mock", "<status>UP</status>" ]


  remote-deposit-capturer:
    container_name: remote-deposit-capturer
    profiles:
      - banking-services
    image: repo.backbase.com/backbase-docker-releases/remote-deposit-capturer:${BB_VERSION}
    ports:
      - "8400:8400"
    environment:
      <<: [ *common-variables, *message-broker-variables ]
      server.port: 8400
      backbase.rdc.rovider: mock
    volumes:
      - ./scripts:/tmp/h
    healthcheck:
      <<: *healthcheck-defaults
      test: [ "CMD", "java", "/tmp/h/HealthCheck.java", "http://registry:8080/eureka/apps/remote-deposit-capturer", "<status>UP</status>" ]


  transaction-enricher:
    container_name: transaction-enricher
    profiles:
      - banking-services
    image: repo.backbase.com/backbase-docker-releases/transaction-enricher:${BB_VERSION}
    ports:
      - "8410:8410"
    environment:
      <<: [ *common-variables, *message-broker-variables, *database-variables ]
      spring.datasource.url: jdbc:mysql://mysql:3306/transaction-enricher?useSSL=false&allowPublicKeyRetrieval=true&cacheServerConfiguration=true&createDatabaseIfNotExist=true
      backbase.communication.services.category.management.service-id: transaction-category-collector
      backbase.communication.services.category.management.service-url: /service-api/v2
      backbase.transaction.enrichment.provider: mock
      backbase.transaction.enrichment.mock.error-mode: false
      server.port: 8410
    volumes:
      - ./scripts:/tmp/h
    healthcheck:
      <<: *healthcheck-defaults
      test: [ "CMD", "java", "/tmp/h/HealthCheck.java", "http://registry:8080/eureka/apps/transaction-enricher", "<status>UP</status>" ]

  transaction-manager:
    container_name: transaction-manager
    profiles:
      - banking-services
    image: repo.backbase.com/backbase-docker-releases/transaction-manager:${BB_VERSION}
    ports:
      - "8411:8411"
    environment:
      <<: [ *common-variables, *message-broker-variables, *database-variables ]
      server.port: 8411

      spring.datasource.url: jdbc:mysql://mysql:3306/transaction-manager?useSSL=false&allowPublicKeyRetrieval=true&cacheServerConfiguration=true&createDatabaseIfNotExist=true
      backbase.enrichment.enabled: true
      backbase.transaction.type: "ATM, ACH, Bill Payment, Cash, Credit/Debit Card, Check, Deposit, Fee, POS, Withdrawal"
      backbase.transaction.enrichment.enabled: true
      backbase.transactions.csv.export.date-format: "MM-dd-yyyy"
      backbase.transactions.csv.export.fields: "BBAN,name,counterPartyAccountNumber,counterPartyName,currency,amount,creditDebitIndicator,bookingDate,type,typeGroup,reference,instructedCurrency,currencyExchangeRate,instructedAmount,description,category,checkSerialNumber"
      backbase.transactions.csv.export.headers: "Account number(BBAN),Account name,Counter party account number,Counter party name,Currency,Amount,Credit/debit indicator,Book date,Transaction type,Transaction group,Transaction reference,Instructed currency,currency exchange rate,Instructed amount,Description,Category,Check number"
      logging.level.org.hibernate.SQL: DEBUG
      logging.level.org.hibernate.type.descriptor.sql.BasicBinder: TRACE
      logging.level.org.hibernate.type.descriptor.sql.BasicExtractor: TRACE
    volumes:
      - ./scripts:/tmp/h
    healthcheck:
      <<: *healthcheck-defaults
      test: [ "CMD", "java", "/tmp/h/HealthCheck.java", "http://registry:8080/eureka/apps/transaction-manager", "<status>UP</status>" ]

  payveris:
    container_name: payveris
    profiles:
      - banking-services
    image: repo.backbase.com/backbase-docker-releases/payveris:${BB_VERSION}
    ports:
      - "8420:8420"
    environment:
      <<: [ *common-variables, *message-broker-variables, *database-variables ]
      server.port: 8420

      spring.datasource.url: jdbc:mysql://mysql:3306/payveris?useSSL=false&allowPublicKeyRetrieval=true&cacheServerConfiguration=true&createDatabaseIfNotExist=true
      backbase.payveris.base-url: https://test-api.regrpayverisbp.com/api/services/
      backbase.payveris.version: 7.29
      backbase.payveris.client-code: pleaseAddHereYourClientCode
      backbase.payveris.api-key: pleaseAddHereYourApiKey
      backbase.payveris.sso.url: https://test.regrpayverisbp.com/pp/sso/eu/
      backbase.payveris.user-code-mapper.type: outbound-integration
    volumes:
      - ./scripts:/tmp/h
    healthcheck:
      <<: *healthcheck-defaults
      test: [ "CMD", "java", "/tmp/h/HealthCheck.java", "http://registry:8080/eureka/apps/payveris", "<status>UP</status>" ]

  payveris-p2p-integrator:
    container_name: payveris-p2p-integrator
    profiles:
      - banking-services
    image: repo.backbase.com/backbase-docker-releases/payveris-p2p-integrator:${BB_VERSION}
    ports:
      - "8421:8421"
    environment:
      <<: [ *common-variables, *message-broker-variables ]
      server.port: 8421
    volumes:
      - ./scripts:/tmp/h
    healthcheck:
      <<: *healthcheck-defaults
      test: [ "CMD", "java", "/tmp/h/HealthCheck.java", "http://registry:8080/eureka/apps/payveris-p2p-integrator", "<status>UP</status>" ]
    depends_on:
      mysql:
        condition: service_healthy